{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","index.js"],"names":["getAuthorsQuery","gql","_templateObject","getBooksQuery","_templateObject2","addBookMutation","_templateObject3","getBookQuery","_templateObject4","BookDetails","displayBookDetails","book","_this","props","data","react_default","a","createElement","name","genre","author","className","books","map","key","id","console","log","this","Component","graphql","options","variables","bookId","BookList","state","selected","_this2","loading","onClick","e","setState","displayBooks","components_BookDetails","AddBook","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","submitForm","preventDefault","_this$state","authorId","refetchQueries","query","disabled","authors","value","onSubmit","type","onChange","target","displayAuthors","compose","client","ApolloClient","uri","App","react_apollo_esm","components_BookList","components_AddBook","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.12568193.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\r\n\r\nexport const getAuthorsQuery = gql`\r\n\t{\r\n\t\tauthors {\r\n\t\t\tname \r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport const getBooksQuery = gql`\r\n\t{\r\n\t\tbooks {\r\n\t\t\tgenre\r\n\t\t\tname \r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport const addBookMutation = gql`\r\n  mutation($name: String!, $genre: String!, $authorId: ID!) {\r\n    addBook(name: $name, genre: $genre, authorId: $authorId) {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getBookQuery = gql`\r\n\tquery ($id: ID!){\r\n\t\tbook(id: $id) {\r\n\t\t\tname \r\n\t\t\tgenre \r\n\t\t\tauthor {\r\n\t\t\t\tid\r\n\t\t\t\tname\r\n\t\t\t\tage\r\n\t\t\t\tbooks {\r\n\t\t\t\t\tname\r\n\t\t\t\t\tid\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\n","import React, { Component } from 'react';\r\nimport { graphql } from 'react-apollo';\r\n\r\nimport { getBookQuery } from '../queries/queries';\r\n\r\nclass BookDetails extends Component {\r\n  displayBookDetails = () => {\r\n    const { book } = this.props.data;\r\n    if (book) {\r\n      return (\r\n        <div>\r\n          <h2>{book.name}</h2>\r\n          <p>{book.genre}</p>\r\n          <p>{book.author.name}</p>\r\n          <p>All books by author</p>\r\n          <ul className=\"other-books\">\r\n            {book.author.books.map((book) => (\r\n              <li key={book.id}>{book.name}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (<div>No book selected</div>);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props)\r\n    return (\r\n      <div className=\"book-details\">\r\n        {this.displayBookDetails()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default graphql(getBookQuery, {\r\n  options: (props) => ({\r\n    variables: {\r\n      id: props.bookId\r\n    }\r\n  })\r\n})(BookDetails);","import React, { Component } from 'react';\r\nimport { graphql } from 'react-apollo';\r\n\r\nimport { getBooksQuery } from '../queries/queries';\r\n\r\nimport BookDetails from './BookDetails';\r\n\r\nclass BookList extends Component {\r\n\tstate = {\r\n\t\tselected: null\r\n\t}\r\n\r\n\tdisplayBooks() {\r\n\t\tlet data = this.props.data;\r\n\t\tif (data.loading) {\r\n\t\t\treturn (<div>Loading books...</div>);\r\n\t\t} else {\r\n\t\t\treturn data.books.map((book) => (\r\n\t\t\t\t<li\r\n\t\t\t\t\tkey={book.id}\r\n\t\t\t\t\tonClick={(e) => this.setState({ selected: book.id })}>\r\n\t\t\t\t\t{book.name}\r\n\t\t\t\t</li>\r\n\t\t\t));\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<ul id=\"book-list\">\r\n\t\t\t\t\t{this.displayBooks()}\r\n\t\t\t\t\t<BookDetails bookId={this.state.selected} />\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default graphql(getBooksQuery)(BookList);\r\n","import React, { Component } from 'react';\r\nimport { graphql, compose } from 'react-apollo';\r\n\r\nimport { getBooksQuery, getAuthorsQuery, addBookMutation } from '../queries/queries';\r\n\r\nclass AddBook extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n      genre: '',\r\n      authorId: '',\r\n    }\r\n  }\r\n\r\n\r\n  displayAuthors() {\r\n    const data = this.props.getAuthorsQuery;\r\n    if (data.loading) {\r\n      return (<option disabled>Loading authors...</option>);\r\n    } else {\r\n      return data.authors.map((author) => (\r\n        <option key={author.id} value={author.id}>{author.name}</option>\r\n      ));\r\n    }\r\n  }\r\n\r\n  submitForm = (e) => {\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n    const { name, genre, authorId } = this.state;\r\n    this.props.addBookMutation({\r\n      variables: {\r\n        name, genre, authorId\r\n      },\r\n      refetchQueries: [\r\n        { query: getBooksQuery },\r\n        // { query: getBookQuery },\r\n      ]\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form id=\"add-book\" onSubmit={this.submitForm}>\r\n        <div className=\"field\">\r\n          <label>Book name:</label>\r\n          <input type=\"text\" onChange={(e) => this.setState({ name: e.target.value })} />\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n          <label>Genre:</label>\r\n          <input type=\"text\" onChange={(e) => this.setState({ genre: e.target.value })} />\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n          <label>Author:</label>\r\n          <select onChange={(e) => this.setState({ authorId: e.target.value })}>\r\n            {this.displayAuthors()}\r\n          </select>\r\n        </div>\r\n\r\n        <button>+</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n// export default graphql(getAuthorsQuery)(AddBook);\r\nexport default compose(\r\n  graphql(getAuthorsQuery, { name: 'getAuthorsQuery' }),\r\n  graphql(addBookMutation, { name: 'addBookMutation' }),\r\n)(AddBook);\r\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nimport BookList from './components/BookList';\nimport AddBook from './components/AddBook';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:3001/graphql'\n});\n\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div id=\"Main\">\n          <h1>Ninjas Ding gog</h1>\n          <BookList />\n          <AddBook />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}